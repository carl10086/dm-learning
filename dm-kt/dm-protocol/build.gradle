apply plugin: 'com.google.protobuf'
apply plugin: "java-library"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    api platform(project(":dm-platform"))
    implementation("io.grpc:grpc-services:")
    implementation("io.grpc:grpc-protobuf:")
    implementation("io.grpc:grpc-stub:")
    compileOnly("com.linecorp.armeria:armeria-grpc")
    implementation("com.google.protobuf:protobuf-java-util:")
    compileOnly('javax.annotation:javax.annotation-api:1.3.2')
}
sourceSets {
    main {
        proto {
            include '**/*.proto'
        }
    }
}



protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }


    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }


    generateProtoTasks {
        all().each {
            it.plugins {
                it.register("grpc")
            }
        }
    }

}

task generateProtoJavaStub() {
    dependsOn generateProto // protobuf 插件之后执行

    // 编译依赖当前任务
    project.getTasks().named("compileJava").configure {
        dependsOn generateProtoJavaStub
    }

    doFirst {

        // logic
        def bd = project.getBuildDir()

        // hard code
        def ps = java.nio.file.Paths.get(bd.toString(), "generated/source/proto/main/grpc")
        println(ps.toAbsolutePath().toString())
        if (!java.nio.file.Files.exists(ps)) {
            println("protobuf source directory not exists")
            return
        }
        println("found proto generated source directory")

        def files = java.nio.file.Files.walk(ps).filter { java.nio.file.Files.isRegularFile(it) && it.getFileName().toString().endsWith(".java") }
//            .peek { println(it.fileName.toString()) }
                .map {
                    String pkg = null;
                    String cls = null;

                    // 确定首行的 package
                    try {
                        var lines = java.nio.file.Files.readAllLines(it);
                        if (lines.isEmpty()) {
                            return null;
                        }

                        var fl = lines.get(0);
                        if (!fl.startsWith("package")) {
                            return null;
                        }
                        pkg = fl.substring(8, fl.length() - 1);

                        List<String> unary = new ArrayList<>();
                        int mode = 0; // find class
                        for (int i = 1; i < lines.size(); i++) {
                            var cur = lines.get(i);

                            switch (mode) {
                                case 0:
                                    if (cur.startsWith("public final class") && cur.endsWith("Grpc {")) {
                                        cls = cur.substring(19, cur.lastIndexOf('{') - 1);
                                        mode = 1;
                                    }
                                    break;
                                case 1: // find blocking stub
                                    if (cur.contains("io.grpc.stub.AbstractBlockingStub")) {
//                                        println(cur)
                                        mode = 2; // parse blocking stub
                                    }
                                    break;
                                case 2:
//                                    println(cur)
                                    if (cur.trim().startsWith("protect")) {
                                        break;
                                    }
                                    if (cur.trim().startsWith("private")) {
                                        break;
                                    }
                                    if (cur.trim().startsWith("public") && cur.trim().endsWith("{")) {
                                        // found
                                        var nl = cur.trim().replace("public", "").replace(" {", "");
//                                        println(nl)
                                        unary.add(nl);
                                        i = i + 3;
                                        mode = 3;
                                        break;
                                    }
                                    break;
                                case 3:
                                    if (cur.trim() == '}') {
                                        // end
//                                        println("end .......")
                                        mode = 1;
                                        break;
                                    }
                                    mode = 2;
                                    break;
                                default:
                                    break;
                            }
                        }
                        // build
                        if (cls == null) {
                            return null;
                        }
                        if (unary.isEmpty()) {
                            return null;
                        }

                        var sb = new StringBuilder();
                        sb.append("package ").append(pkg).append(";\n\n");

                        var service = cls.replace("Grpc", "");
                        sb.append("public interface ").append(service).append("").append(" {\n\n");

//                    sb.append("  default io.grpc.ServerServiceDefinition bindService() {\n" +
//                            "    throw new IllegalStateException();\n" +
//                            "  }\n")

                        // methods
                        for (String s : unary) {
                            s = s.trim();
//                            println(s)
                            var ss = s.split(" ");
                            var rt = ss[0];
                            var mds = ss[1].split("\\(");
                            var name = mds[0];
                            var pt = mds[1].split(",")[0];

                            sb.append("  ").append(rt).append(" ").append(name).append("(").append(pt).append(" request);\n\n");
                        }

                        sb.append("  // end unary calls.\n\n")

                        // provider
                        sb.append("  static ").append("io.grpc.BindableService newProvider(").append(service).append(" service) {\n")
                                .append("    return new ").append(pkg).append(".").append(service).append("Grpc.").append(service).append("ImplBase() {\n");

                        for (String s : unary) {
                            s = s.trim();
                            var ss = s.split(" ");
                            var rt = ss[0];
                            var mds = ss[1].split("\\(");
                            var name = mds[0];
                            var pt = mds[1].split(",")[0];

                            sb.append("        @Override\n");

                            sb.append("        public void ").append(name).append("(").append(pt).append(" request, ").append("io.grpc.stub.StreamObserver<").append(rt).append("> responseObserver").append(" ) {\n");
                            sb.append("          responseObserver.onNext(service.").append(name).append("(").append("request)").append(");\n");
                            sb.append("          responseObserver.onCompleted();\n");
                            sb.append("        }\n\n");
                        }

                        sb.append("    };\n")
                                .append("  }\n\n");


                        // stub class
                        sb.append("  ").append("java.lang.Class<").append(pkg).append(".").append(service).append("Grpc.").append(service).append("BlockingStub> STUB_CLASS = ")
                                .append(pkg).append(".").append(service).append("Grpc.").append(service).append("BlockingStub.class").append(";\n");

                        sb.append("  static ").append(service).append(" ").append("newConsumer(com.linecorp.armeria.client.grpc.GrpcClientBuilder factory)").append(" {\n")
                                .append("    ").append("return new Consumer(factory.build(STUB_CLASS))").append(";\n")
                                .append("  }\n");
                        // end stub class


                        // consumer
                        sb.append("\n")
                                .append("  final class Consumer implements ").append(service).append(" {\n")
                                .append("\n")
                                .append("    private final ").append(pkg).append(".").append(service).append("Grpc.").append(service).append("BlockingStub stub;\n")
                                .append("\n")
                                .append("    public Consumer(").append(pkg).append(".").append(service).append("Grpc.").append(service).append("BlockingStub stub)").append(" {\n")
                                .append("      this.stub = stub;\n")
                                .append("    }\n")
                                .append("\n");
                        // methods
                        for (String s : unary) {
                            s = s.trim();
                            var ss = s.split(" ");
                            var rt = ss[0];
                            var mds = ss[1].split("\\(");
                            var name = mds[0];
                            var pt = mds[1].split(",")[0];

                            sb.append("    public ").append(rt).append(" ").append(name).append("(").append(pt).append(" request) {\n");
                            sb.append("      return this.stub.").append(name).append("(").append("request").append(");\n");
                            sb.append("    }\n\n");
                        }

                        sb.append("  }\n");

                        // end
                        sb.append("}\n");

                        var stub = sb.toString();
//                    println(stub); // for debug

                        var newPath = it.getParent().resolve(service + ".java");
                        java.nio.file.Files.writeString(newPath, stub);
                        return stub;
                    } catch (Exception e) {
                        println(e);
                        return null;
                    }
                }
                .toList();

    }
}
