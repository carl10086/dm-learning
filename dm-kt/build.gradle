plugins {
    id 'io.freefair.lombok' version '6.5.1' apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion" apply false
    id "com.google.protobuf" version "0.9.1" apply false
}
subprojects {
    apply 'plugin': 'io.freefair.lombok'
}


ext {
    dmBaseProjects = subprojects.findAll { it.name.startsWith("dm-base") }
    socProjects = subprojects.findAll { it.name.startsWith("dm-soc") }

    dmLibProjects = []
    dmLibProjects.addAll(dmBaseProjects)
    dmLibProjects.addAll(socProjects)
    dmLibProjects.add(project(":dm-lib"))

    grpcKotlinVersion = "1.3.0"
    armeriacVersion = "1.22.0"
    springBootVersion = "3.0.2"


    resilience4jVersion = "2.0.2"
    protobufVersion = "3.21.12"
    grpcVersion = "1.51.1"
    fastutilVersion = "8.5.11"
    libphonenumberVersion = "8.13.4"
    micrometerTracingVersion = "1.0.1"


}


group = "com.ysz"

tasks.register("showProjects") {
    doLast {
        println("dmLibProjects:$dmLibProjects")
    }
}


configure(dmLibProjects) {
    pro ->
        {
            apply plugin: "maven-publish"
            apply plugin: "java-library"
            apply plugin: 'org.jetbrains.kotlin.jvm'
            apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

            kotlin {
                jvmToolchain {
                    languageVersion.set(JavaLanguageVersion.of(17))
                }
            }

            test {
                useJUnitPlatform()
                systemProperty("java.awt.headless", "true")
                systemProperty("testGroups", project.properties.get("testGroups"))
                systemProperty("io.netty.leakDetection.level", "paranoid")
                systemProperty("io.netty5.leakDetectionLevel", "paranoid")
                systemProperty("io.netty5.leakDetection.targetRecords", "32")
                systemProperty("io.netty5.buffer.lifecycleTracingEnabled", "true")
                systemProperty("io.netty5.buffer.leakDetectionEnabled", "true")
                jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED",
                         "--add-opens=java.base/java.util=ALL-UNNAMED"])
            }


            dependencies {
                api platform(project(":dm-platform"))
                implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

//                testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
//                testImplementation("org.assertj:assertj-core:3.22.0")
                testImplementation("org.junit.jupiter:junit-jupiter:")
                testImplementation("org.assertj:assertj-core:")
            }
        }
}


