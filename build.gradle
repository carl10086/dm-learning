plugins {
    id 'io.freefair.lombok' version '6.5.1' apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion" apply false
    id "com.google.protobuf" version "0.9.1" apply false
}
subprojects {
    apply 'plugin': 'io.freefair.lombok'
}


ext {


    rbProjects = subprojects.findAll { it.name.startsWith("rb-") } - project("rb-platform")
    rbProjects.add(project(":integration-tests"))


    armProjects = subprojects.findAll { it.name.startsWith("dm-arm") }

    dmBaseProjects = subprojects.findAll { it.name.startsWith("dm-base") }

    /*all kotlin projects*/
    kotlinProjects = []
    kotlinProjects.addAll(rbProjects)
    kotlinProjects.addAll([project(":dm-lib")])
    kotlinProjects.addAll(armProjects)
    kotlinProjects.addAll(dmBaseProjects)

    dmLibProjects = []
    dmLibProjects.addAll(dmBaseProjects)



    /*current no kotlin projects*/
//    javaProjects = subprojects - rbProjects - project(":rb-platform") - project(":dm-platform")
    javaProjects = [project(":dm-ddd-gw"), project(":dm-ddd-vshop"), project(":dm-fast"), project(":dm-netty")]


    /*other versions*/
    grpcVersion = "1.51.1"
    protobufVersion = "3.21.12"
    grpcKotlinVersion = "1.3.0"
    armeriacVersion = "1.20.3"
    springBootVersion = "3.0.1"

}


group = "com.ysz"

tasks.register("showProjects") {
    doLast {
        println("armProject:$armProjects")
        println("rbProjects:$rbProjects")
        println("kotlinProjects:$kotlinProjects")
        println("javaProjects:$javaProjects")
    }
}


/*configure for javaProjects*/
configure(javaProjects) {
    project ->
        {
            apply plugin: "java"
            apply plugin: "io.freefair.lombok"
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(17)
                }
            }


            tasks.withType(JavaCompile) {
                options.encoding = 'UTF-8'
            }
        }
}


/*configure for all kotlin jobs*/
configure(kotlinProjects) {
    project ->
        {
            apply plugin: 'org.jetbrains.kotlin.jvm'
            apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

            kotlin {
                jvmToolchain {
                    languageVersion.set(JavaLanguageVersion.of(17)) // "8"
                }
            }

            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

            }

            test {
                useJUnitPlatform()
                systemProperty("java.awt.headless", "true")
                systemProperty("testGroups", project.properties.get("testGroups"))
                systemProperty("io.netty.leakDetection.level", "paranoid")
                systemProperty("io.netty5.leakDetectionLevel", "paranoid")
                systemProperty("io.netty5.leakDetection.targetRecords", "32")
                systemProperty("io.netty5.buffer.lifecycleTracingEnabled", "true")
                systemProperty("io.netty5.buffer.leakDetectionEnabled", "true")
                jvmArgs(["--add-opens=java.base/java.lang=ALL-UNNAMED",
                         "--add-opens=java.base/java.util=ALL-UNNAMED"])
            }

        }
}


/*configure for all dm-arm-projects*/
configure(armProjects) {
    project ->
        {

            dependencies {
                api platform("com.linecorp.armeria:armeria-bom:${armeriacVersion}")
                api platform("io.grpc:grpc-bom:${grpcVersion}")
                api platform("com.google.protobuf:protobuf-bom:${protobufVersion}")


                implementation("io.grpc:grpc-services:")
                implementation("io.grpc:grpc-protobuf:")
                implementation("io.grpc:grpc-stub:")
                implementation("com.google.protobuf:protobuf-java-util:")
                implementation 'javax.annotation:javax.annotation-api:1.3.2'


                testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
                testImplementation("org.assertj:assertj-core:3.22.0")
            }
        }
}


configure(dmLibProjects) {
    pro ->
        {
            apply plugin: "maven-publish"
            apply plugin: "java-library"

            dependencies {
                api platform(project(":dm-platform"))

//                testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
//                testImplementation("org.assertj:assertj-core:3.22.0")
                testImplementation("org.junit.jupiter:junit-jupiter:")
                testImplementation("org.assertj:assertj-core:")
            }
        }
}


